name: Build Self-Contained Multi-Platform Releases

permissions:
  contents: write
  pull-requests: write

on:
  push:
    tags:
      - '*'  # Trigger on version tags like v1.0.0
  workflow_dispatch:  # Allow manual trigger

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        pip install -r requirements.txt
    
    - name: Download FFmpeg for Windows
      run: |
        curl -L -o ffmpeg.exe https://huggingface.co/lj1995/VoiceConversionWebUI/resolve/main/ffmpeg.exe
    
    - name: Build fully bundled Windows executable
      run: |
        pyinstaller --windowed --onefile --icon=icon.ico --add-data="icon.png;." --add-data="icon.ico;." --add-data="ffmpeg.exe;." --collect-submodules PyQt6.QtCore --collect-submodules PyQt6.QtGui --collect-submodules PyQt6.QtWidgets --hidden-import=PyQt6.sip --collect-all yt_dlp --noconsole --name=HwYtVidGrabber-win HwYtVidGrabber.py
    
    - name: Upload Windows artifact
      uses: actions/upload-artifact@v4
      with:
        name: windows-exe
        path: dist/HwYtVidGrabber-win.exe

  build-macos:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        pip install -r requirements.txt
    
    - name: Build fully bundled macOS application
      run: |
        pyinstaller --windowed --onefile --icon=icon.ico \
        --add-data="icon.png:." --add-data="icon.ico:." \
        --collect-submodules PyQt6.QtCore \
        --collect-submodules PyQt6.QtGui \
        --collect-submodules PyQt6.QtWidgets \
        --hidden-import=PyQt6.sip \
        --collect-all yt_dlp \
        --name=HwYtVidGrabber \
        HwYtVidGrabber.py
        
        # Create proper .app bundle
        mkdir -p HwYtVidGrabber.app/Contents/MacOS
        mkdir -p HwYtVidGrabber.app/Contents/Resources
        
        # Move executable
        mv dist/HwYtVidGrabber HwYtVidGrabber.app/Contents/MacOS/
        chmod +x HwYtVidGrabber.app/Contents/MacOS/HwYtVidGrabber
        
        # Copy icon
        cp icon.png HwYtVidGrabber.app/Contents/Resources/icon.png
        
        # Create Info.plist
        cat > HwYtVidGrabber.app/Contents/Info.plist << 'EOF'
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>CFBundleExecutable</key>
            <string>HwYtVidGrabber</string>
            <key>CFBundleIconFile</key>
            <string>icon.png</string>
            <key>CFBundleIdentifier</key>
            <string>com.malikhw47.HwYtVidGrabber</string>
            <key>CFBundleName</key>
            <string>HwYtVidGrabber</string>
            <key>CFBundlePackageType</key>
            <string>APPL</string>
            <key>CFBundleShortVersionString</key>
            <string>1.3</string>
            <key>CFBundleVersion</key>
            <string>1.3</string>
            <key>LSMinimumSystemVersion</key>
            <string>10.15</string>
            <key>NSHighResolutionCapable</key>
            <true/>
        </dict>
        </plist>
        EOF
    
    - name: Create DMG
      run: |
        # Create a temporary directory for the DMG contents
        mkdir -p dmg-contents
        
        # Copy the .app bundle to the DMG contents
        cp -R HwYtVidGrabber.app dmg-contents/
        
        # Create Applications symlink for easy installation
        ln -s /Applications dmg-contents/Applications
        
        # Create the DMG using hdiutil
        hdiutil create -volname "HwYtVidGrabber" \
                       -srcfolder dmg-contents \
                       -ov \
                       -format UDZO \
                       -imagekey zlib-level=9 \
                       HwYtVidGrabber-Darwin.dmg
        
        # Verify the DMG was created
        ls -la HwYtVidGrabber-Darwin.dmg
    
    - name: Upload macOS artifact
      uses: actions/upload-artifact@v4
      with:
        name: macos-dmg
        path: HwYtVidGrabber-Darwin.dmg

  build-linux-binary:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        pip install -r requirements.txt
    
    - name: Build Linux binary
      run: |
        pyinstaller --onefile --icon=icon.png \
        --add-data="icon.png:." --add-data="icon.ico:." \
        --collect-submodules PyQt6.QtCore \
        --collect-submodules PyQt6.QtGui \
        --collect-submodules PyQt6.QtWidgets \
        --hidden-import=PyQt6.sip \
        --collect-all yt_dlp \
        --name=HwYtVidGrabber-Linux \
        HwYtVidGrabber.py
    
    - name: Upload Linux binary artifact
      uses: actions/upload-artifact@v4
      with:
        name: linux-binary
        path: dist/HwYtVidGrabber-Linux

  build-linux-packages:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install packaging tools
      run: |
        sudo apt-get update
        sudo apt-get install -y debhelper dh-python devscripts fakeroot
    
    - name: Create lightweight DEB package
      run: |
        # Verify icon.png exists in the repo root
        if [ ! -f icon.png ]; then
            echo "Error: icon.png not found in repository root!"
            exit 1
        fi
        
        # Build .deb package with ONLY Python file
        mkdir -p deb-package/DEBIAN
        mkdir -p deb-package/opt/HwYtVidGrabber
        mkdir -p deb-package/usr/bin
        mkdir -p deb-package/usr/share/applications
        mkdir -p deb-package/usr/share/pixmaps
        mkdir -p deb-package/usr/share/doc/HwYtVidGrabber
        
        # Copy ONLY the Python source file and icons
        cp HwYtVidGrabber.py deb-package/opt/HwYtVidGrabber/
        cp icon.png deb-package/opt/HwYtVidGrabber/
        cp icon.ico deb-package/opt/HwYtVidGrabber/
        
        # Copy icon to pixmaps directory with proper name
        cp icon.png deb-package/usr/share/pixmaps/HwYtVidGrabber.png
        
        # Create wrapper script that uses virtual environment
        cat > deb-package/usr/bin/HwYtVidGrabber << 'EOF'
        #!/bin/bash
        # HwYtVidGrabber wrapper script with virtual environment
        
        VENV_DIR="/opt/HwYtVidGrabber/venv"
        
        # Set Qt6 platform and run the application
        export QT_QPA_PLATFORM=xcb
        cd /opt/HwYtVidGrabber
        exec "$VENV_DIR/bin/python" HwYtVidGrabber.py "$@"
        EOF
        chmod +x deb-package/usr/bin/HwYtVidGrabber
        
        # Create desktop file
        cat > deb-package/usr/share/applications/hwytvidgrabber.desktop << 'EOF'
        [Desktop Entry]
        Name=HwYtVidGrabber
        Comment=YouTube Video Downloader by MalikHw47
        Exec=HwYtVidGrabber
        Icon=HwYtVidGrabber
        Terminal=false
        Type=Application
        Categories=AudioVideo;Network;Video;
        StartupWMClass=HwYtVidGrabber
        Keywords=youtube;video;download;grabber;
        MimeType=text/uri-list;x-scheme-handler/http;x-scheme-handler/https;
        EOF
        
        # Create control file with minimal dependencies
        cat > deb-package/DEBIAN/control << 'EOF'
        Package: HwYtVidGrabber
        Version: 1.3
        Section: video
        Priority: optional
        Architecture: amd64
        Depends: python3, qt6-qpa-plugins, libqt6gui6, libqt6widgets6, libqt6core6, python3-venv, python3-pip, libxcb-cursor0, libxcb-cursor-dev, ffmpeg
        Maintainer: MalikHw47 <help.malicorporation@gmail.com>
        Description: HwYtVidGrabber - YouTube Video Downloader by MalikHw47
         HwYtVidGrabber is a lightweight PyQt6-based YouTube video downloader 
         created by MalikHw47 that uses system libraries and virtual environment.
         This package automatically creates a virtual environment and installs yt-dlp during installation.
         .
         Features include:
          - YouTube video downloading with yt-dlp (installed during package setup)
          - Modern PyQt6 interface (uses system libraries)
          - Multiple format support (MP4, MP3, muted MP4)
          - Resolution selection up to 4K
          - Dark mode support
        Homepage: https://github.com/MalikHw47/HwYtVidGrabber
        EOF
        
        # Create postinst script to create venv and install yt-dlp
        cat > deb-package/DEBIAN/postinst << 'EOF'
        #!/bin/bash
        set -e
        
        VENV_DIR="/opt/HwYtVidGrabber/venv"
        
        echo "Creating HwYtVidGrabber virtual environment..."
        
        # Create virtual environment in /opt/HwYtVidGrabber/venv
        python3 -m venv "$VENV_DIR"
        
        # Install yt-dlp in the virtual environment 
        "$VENV_DIR/bin/pip" install --upgrade pip
        "$VENV_DIR/bin/pip" install yt-dlp pyqt6
        
        # Make sure venv directory has proper permissions
        chown -R root:root "$VENV_DIR"
        chmod -R 755 "$VENV_DIR"
        
        # Update desktop database
        if [ -x /usr/bin/update-desktop-database ]; then
            /usr/bin/update-desktop-database /usr/share/applications
        fi
        
        echo "HwYtVidGrabber installed successfully with virtual environment!"
        
        exit 0
        EOF
        chmod +x deb-package/DEBIAN/postinst
        
        # Create copyright file
        cat > deb-package/usr/share/doc/HwYtVidGrabber/copyright << 'EOF'
        Format: https://www.debian.org/doc/packaging-manuals/copyright-format/1.0/
        Upstream-Name: HwYtVidGrabber
        Source: https://github.com/MalikHw47/HwYtVidGrabber

        Files: *
        Copyright: 2024 MalikHw47
        License: MIT
        EOF
        
        # Create changelog
        cat > deb-package/usr/share/doc/HwYtVidGrabber/changelog << 'EOF'
        HwYtVidGrabber (1.3) unstable; urgency=medium

          * HwYtVidGrabber v1.3 by MalikHw47 - Virtual environment package
          * Uses system Qt6 packages and creates isolated virtual environment during installation
          * Only contains Python source file for minimal size
          * Automatically creates venv and installs yt-dlp during package installation

         -- MalikHw47 <help.malicorporation@gmail.com>  $(date -R)
        EOF
        
        gzip deb-package/usr/share/doc/HwYtVidGrabber/changelog
        
        # Build DEB package
        dpkg-deb --build deb-package HwYtVidGrabber-debian.deb
    
    - name: Upload DEB package
      uses: actions/upload-artifact@v4
      with:
        name: linux-deb
        path: HwYtVidGrabber-debian.deb

  build-pypi:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Extract version from tag
      id: get_version
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          # Remove 'refs/tags/' prefix and any 'v' prefix
          VERSION=${GITHUB_REF#refs/tags/}
          VERSION=${VERSION#v}  # Remove leading 'v' if present
          echo "version=$VERSION" >> $GITHUB_OUTPUT
        else
          echo "version=1.4.2" >> $GITHUB_OUTPUT
        fi
    
    - name: Setup PyPI package structure
      run: |
        # Copy existing PyPI setup files
        cp -r PyPI/* .
        
        VERSION="${{ steps.get_version.outputs.version }}"
        echo "Updating to version: $VERSION"
        
        # Update version in setup.py (handle multiple formats)
        if [ -f setup.py ]; then
          echo "Updating setup.py..."
          # Try different version patterns
          sed -i "s/version=['\"][^'\"]*['\"]/version=\"$VERSION\"/g" setup.py || true
          sed -i "s/version = ['\"][^'\"]*['\"]/version = \"$VERSION\"/g" setup.py || true
          sed -i "s/version=['\"][0-9\.]*['\"]/version=\"$VERSION\"/g" setup.py || true
          # Show what we updated
          grep -n "version" setup.py || echo "No version found in setup.py"
        fi
        
        # Update version in pyproject.toml if it exists
        if [ -f pyproject.toml ]; then
          echo "Updating pyproject.toml..."
          # Try different version patterns for TOML
          sed -i "s/version = ['\"][^'\"]*['\"]/version = \"$VERSION\"/g" pyproject.toml || true
          sed -i "s/version=['\"][^'\"]*['\"]/version=\"$VERSION\"/g" pyproject.toml || true
          sed -i "s/version = ['\"][0-9\.]*['\"]/version = \"$VERSION\"/g" pyproject.toml || true
          # Show what we updated
          grep -n "version" pyproject.toml || echo "No version found in pyproject.toml"
        fi
        
        # Show current directory contents
        echo "Files in current directory:"
        ls -la
        
        # Ensure main Python file and icons are available for packaging
        if [ ! -f HwYtVidGrabber.py ]; then
            echo "Error: HwYtVidGrabber.py not found!"
            exit 1
        fi
        
        # Copy icons if they exist
        cp icon.png . 2>/dev/null || echo "icon.png not found, skipping"
        cp icon.ico . 2>/dev/null || echo "icon.ico not found, skipping"
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine wheel setuptools
    
    - name: Build PyPI packages
      run: |
        python -m build
        ls -la dist/
    
    - name: Upload PyPI artifacts
      uses: actions/upload-artifact@v4
      with:
        name: pypi-packages
        path: dist/*
    
    - name: Publish to PyPI
      if: startsWith(github.ref, 'refs/tags/')
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        python -m twine upload dist/* --verbose

  create-release:
    needs: [build-windows, build-macos, build-linux-binary, build-linux-packages, build-pypi]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          windows-exe/HwYtVidGrabber-win.exe
          macos-dmg/HwYtVidGrabber-Darwin.dmg
          linux-binary/HwYtVidGrabber-Linux
          linux-deb/HwYtVidGrabber-debian.deb
          pypi-packages/*.whl
          pypi-packages/*.tar.gz
          hwytvidgrabber.desktop
          icon.png
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  update-aur:
    needs: create-release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup SSH for AUR
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.AUR_SSH_KEY }}" > ~/.ssh/aur
        chmod 600 ~/.ssh/aur
        ssh-keyscan -H aur.archlinux.org >> ~/.ssh/known_hosts
        cat > ~/.ssh/config << EOF
        Host aur.archlinux.org
          HostName aur.archlinux.org
          User aur
          IdentityFile ~/.ssh/aur
        EOF

    - name: Install makepkg dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y pacman-package-manager

    - name: Clone AUR repository
      run: |
        git clone ssh://aur@aur.archlinux.org/hwytvidgrabber-bin.git aur-repo

    - name: Update AUR package
      run: |
        cd aur-repo
        
        # Get version from release tag
        VERSION=$(echo $GITHUB_REF | sed 's/refs\/tags\/v//')
        
        # Update PKGBUILD
        cat > PKGBUILD << EOF
        # Maintainer: MalikHw47 <help.malicorporation@gmail.com>
        pkgname=hwytvidgrabber-bin
        pkgver=${VERSION}
        pkgrel=1
        pkgdesc="A smol YouTube video downloader by MalikHw47 (Lightweight af)"
        arch=('x86_64')
        url="https://github.com/MalikHw47/HwYtVidGrabber"
        license=('MIT')
        depends=('ffmpeg')
        provides=('hwytvidgrabber')
        conflicts=('hwytvidgrabber')
        source=("\${pkgname}-\${pkgver}::\${url}/releases/download/v\${pkgver}/HwYtVidGrabber-Linux"
                "\${pkgname}-\${pkgver}.desktop::\${url}/releases/download/v\${pkgver}/hwytvidgrabber.desktop"
                "\${pkgname}-\${pkgver}.png::\${url}/releases/download/v\${pkgver}/icon.png")
        sha256sums=('SKIP'
                    'SKIP'
                    'SKIP')

        package() {
            # Install the binary
            install -Dm755 "\${srcdir}/\${pkgname}-\${pkgver}" "\${pkgdir}/usr/bin/HwYtVidGrabber"
            
            # Install desktop file
            install -Dm644 "\${srcdir}/\${pkgname}-\${pkgver}.desktop" "\${pkgdir}/usr/share/applications/hwytvidgrabber.desktop"
            
            # Install icon
            install -Dm644 "\${srcdir}/\${pkgname}-\${pkgver}.png" "\${pkgdir}/usr/share/pixmaps/hwytvidgrabber.png"
        }
        EOF
        
        # Generate .SRCINFO using makepkg
        makepkg --printsrcinfo > .SRCINFO
        
        # Configure Git
        git config user.name "MalikHw47"
        git config user.email "help.malicorporation@gmail.com"
        
        # Commit and push changes
        git add PKGBUILD .SRCINFO
        git commit -m "Update to version ${VERSION}"
        git push origin master
