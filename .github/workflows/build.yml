name: Build Self-Contained Multi-Platform Releases

permissions:
  contents: write
  pull-requests: write

on:
  push:
    tags:
      - '*'  # Trigger on version tags like v1.0.0
  workflow_dispatch:  # Allow manual trigger

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        pip install -r requirements.txt
    
    - name: Download FFmpeg for Windows
      run: |
        curl -L -o ffmpeg.exe https://huggingface.co/lj1995/VoiceConversionWebUI/resolve/main/ffmpeg.exe
    
    - name: Build fully bundled Windows executable
      run: |
        pyinstaller --windowed --onefile --icon=icon.ico --add-data="icon.png;." --add-data="icon.ico;." --add-data="ffmpeg.exe;." --collect-submodules PyQt6.QtCore --collect-submodules PyQt6.QtGui --collect-submodules PyQt6.QtWidgets --hidden-import=PyQt6.sip --collect-all yt_dlp --noconsole --name=HwYtVidGrabber-win HwYtVidGrabber.py
    
    - name: Upload Windows artifact
      uses: actions/upload-artifact@v4
      with:
        name: windows-exe
        path: dist/HwYtVidGrabber-win.exe

  build-macos:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        pip install -r requirements.txt
    
    - name: Build fully bundled macOS application
      run: |
        pyinstaller --windowed --onefile --icon=icon.ico \
        --add-data="icon.png:." --add-data="icon.ico:." \
        --collect-submodules PyQt6.QtCore \
        --collect-submodules PyQt6.QtGui \
        --collect-submodules PyQt6.QtWidgets \
        --hidden-import=PyQt6.sip \
        --collect-all yt_dlp \
        --name=HwYtVidGrabber \
        HwYtVidGrabber.py
        
        # Create proper .app bundle
        mkdir -p HwYtVidGrabber.app/Contents/MacOS
        mkdir -p HwYtVidGrabber.app/Contents/Resources
        
        # Move executable
        mv dist/HwYtVidGrabber HwYtVidGrabber.app/Contents/MacOS/
        chmod +x HwYtVidGrabber.app/Contents/MacOS/HwYtVidGrabber
        
        # Copy icon
        cp icon.png HwYtVidGrabber.app/Contents/Resources/icon.png
        
        # Create Info.plist
        cat > HwYtVidGrabber.app/Contents/Info.plist << 'EOF'
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>CFBundleExecutable</key>
            <string>HwYtVidGrabber</string>
            <key>CFBundleIconFile</key>
            <string>icon.png</string>
            <key>CFBundleIdentifier</key>
            <string>com.malikhw47.HwYtVidGrabber</string>
            <key>CFBundleName</key>
            <string>HwYtVidGrabber</string>
            <key>CFBundlePackageType</key>
            <string>APPL</string>
            <key>CFBundleShortVersionString</key>
            <string>1.3</string>
            <key>CFBundleVersion</key>
            <string>1.3</string>
            <key>LSMinimumSystemVersion</key>
            <string>10.15</string>
            <key>NSHighResolutionCapable</key>
            <true/>
        </dict>
        </plist>
        EOF
    
    - name: Create DMG
      run: |
        # Create a temporary directory for the DMG contents
        mkdir -p dmg-contents
        
        # Copy the .app bundle to the DMG contents
        cp -R HwYtVidGrabber.app dmg-contents/
        
        # Create Applications symlink for easy installation
        ln -s /Applications dmg-contents/Applications
        
        # Create the DMG using hdiutil
        hdiutil create -volname "HwYtVidGrabber" \
                       -srcfolder dmg-contents \
                       -ov \
                       -format UDZO \
                       -imagekey zlib-level=9 \
                       HwYtVidGrabber-Darwin.dmg
        
        # Verify the DMG was created
        ls -la HwYtVidGrabber-Darwin.dmg
    
    - name: Upload macOS artifact
      uses: actions/upload-artifact@v4
      with:
        name: macos-dmg
        path: HwYtVidGrabber-Darwin.dmg

  build-linux-binary:
    runs-on: ubuntu-latest
    outputs:
      linux-binary-sha256: ${{ steps.hash.outputs.sha256 }}
      desktop-file-sha256: ${{ steps.desktop-hash.outputs.sha256 }}
      icon-sha256: ${{ steps.icon-hash.outputs.sha256 }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
    - uses: actions/checkout@v4
    
    - name: Extract version from tag
      id: get_version
      run: |
        if [[ "${{ github.ref }}" == refs/tags/* ]]; then
          # Extract version from tag and clean it
          RAW_VERSION=${GITHUB_REF#refs/tags/}
          CLEAN_VERSION=${RAW_VERSION#v}
          echo "version=$CLEAN_VERSION" >> $GITHUB_OUTPUT
          echo "raw_version=$RAW_VERSION" >> $GITHUB_OUTPUT
          echo "Version: $CLEAN_VERSION"
        else
          echo "version=dev" >> $GITHUB_OUTPUT
          echo "raw_version=dev" >> $GITHUB_OUTPUT
          echo "Version: dev (not a tag)"
        fi
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        pip install -r requirements.txt
    
    - name: Build Linux binary
      run: |
        pyinstaller --onefile --icon=icon.png \
        --add-data="icon.png:." --add-data="icon.ico:." \
        --collect-submodules PyQt6.QtCore \
        --collect-submodules PyQt6.QtGui \
        --collect-submodules PyQt6.QtWidgets \
        --hidden-import=PyQt6.sip \
        --collect-all yt_dlp \
        --name=HwYtVidGrabber-Linux \
        HwYtVidGrabber.py
    
    - name: Generate desktop file
      run: |
        cat > hwytvidgrabber.desktop << 'EOF'
        [Desktop Entry]
        Name=HwYtVidGrabber
        Comment=YouTube Video Downloader by MalikHw47
        Exec=HwYtVidGrabber-Linux
        Icon=hwytvidgrabber
        Terminal=false
        Type=Application
        Categories=AudioVideo;Network;Video;
        StartupWMClass=HwYtVidGrabber
        Keywords=youtube;video;download;grabber;
        MimeType=text/uri-list;x-scheme-handler/http;x-scheme-handler/https;
        EOF
    
    - name: Calculate SHA256 hashes
      id: hash
      run: |
        BINARY_SHA256=$(sha256sum dist/HwYtVidGrabber-Linux | cut -d' ' -f1)
        echo "sha256=$BINARY_SHA256" >> $GITHUB_OUTPUT
        echo "Linux binary SHA256: $BINARY_SHA256"
    
    - name: Calculate desktop file SHA256
      id: desktop-hash
      run: |
        DESKTOP_SHA256=$(sha256sum hwytvidgrabber.desktop | cut -d' ' -f1)
        echo "sha256=$DESKTOP_SHA256" >> $GITHUB_OUTPUT
        echo "Desktop file SHA256: $DESKTOP_SHA256"
    
    - name: Calculate icon SHA256
      id: icon-hash
      run: |
        ICON_SHA256=$(sha256sum icon.png | cut -d' ' -f1)
        echo "sha256=$ICON_SHA256" >> $GITHUB_OUTPUT
        echo "Icon SHA256: $ICON_SHA256"
    
    - name: Upload Linux binary artifact
      uses: actions/upload-artifact@v4
      with:
        name: linux-binary
        path: |
          dist/HwYtVidGrabber-Linux
          hwytvidgrabber.desktop
          icon.png

  build-linux-packages:
    runs-on: ubuntu-latest
    needs: build-linux-binary
    steps:
    - uses: actions/checkout@v4
    
    - name: Download Linux binary artifacts
      uses: actions/download-artifact@v4
      with:
        name: linux-binary
        path: artifacts/
    
    - name: Install packaging tools
      run: |
        sudo apt-get update
        sudo apt-get install -y debhelper dh-python devscripts fakeroot
    
    - name: Create DEB package based on binary
      run: |
        # Get version from the build-linux-binary job
        VERSION="${{ needs.build-linux-binary.outputs.version }}"
        if [ -z "$VERSION" ] || [ "$VERSION" = "dev" ]; then
          VERSION="1.3.0"
          echo "Using default version: $VERSION"
        else
          echo "Using extracted version: $VERSION"
        fi
        
        # List downloaded artifacts for debugging
        echo "Downloaded artifacts:"
        ls -la artifacts/
        
        # Find the binary (it should be in artifacts/ directly now due to artifact structure)
        if [ -f artifacts/HwYtVidGrabber-Linux ]; then
            BINARY_PATH="artifacts/HwYtVidGrabber-Linux"
            echo "Found binary at: $BINARY_PATH"
        else
            echo "Error: HwYtVidGrabber-Linux binary not found!"
            find artifacts/ -name "*HwYtVidGrabber-Linux*" -type f
            exit 1
        fi
        
        if [ ! -f artifacts/icon.png ]; then
            echo "Error: icon.png not found!"
            exit 1
        fi
        
        # Build .deb package with binary
        mkdir -p deb-package/DEBIAN
        mkdir -p deb-package/usr/bin
        mkdir -p deb-package/usr/share/applications
        mkdir -p deb-package/usr/share/pixmaps
        mkdir -p deb-package/usr/share/doc/hwytvidgrabber
        
        # Copy the binary and make it executable
        cp "$BINARY_PATH" deb-package/usr/bin/HwYtVidGrabber-Linux
        chmod +x deb-package/usr/bin/HwYtVidGrabber-Linux
        
        # Create symlink for easier access
        ln -s HwYtVidGrabber-Linux deb-package/usr/bin/HwYtVidGrabber
        
        # Copy icon to pixmaps directory
        cp artifacts/icon.png deb-package/usr/share/pixmaps/hwytvidgrabber.png
        
        # Create desktop file
        cat > deb-package/usr/share/applications/hwytvidgrabber.desktop << 'EOF'
        [Desktop Entry]
        Name=HwYtVidGrabber
        Comment=A smol YouTube video downloader by MalikHw47 (Lightweight af)
        Exec=HwYtVidGrabber-Linux
        Icon=hwytvidgrabber
        Terminal=false
        Type=Application
        Categories=AudioVideo;Network;Video;
        StartupWMClass=HwYtVidGrabber
        Keywords=youtube;video;download;grabber;
        MimeType=text/uri-list;x-scheme-handler/http;x-scheme-handler/https;
        EOF
        
        # Create control file with dynamic version
        cat > deb-package/DEBIAN/control << EOF
        Package: hwytvidgrabber
        Version: $VERSION
        Section: video
        Priority: optional
        Architecture: amd64
        Depends: ffmpeg
        Maintainer: MalikHw47 <help.malicorporation@gmail.com>
        Description: A smol YouTube video downloader by MalikHw47 (Lightweight af)
        Homepage: https://github.com/MalikHw/HwYtVidGrabber
        EOF
        
        # Create postinst script to update desktop database
        cat > deb-package/DEBIAN/postinst << 'EOF'
        #!/bin/bash
        set -e
        
        # Update desktop database
        if [ -x /usr/bin/update-desktop-database ]; then
            /usr/bin/update-desktop-database /usr/share/applications
        fi
        
        echo "HwYtVidGrabber installed successfully!"
        echo "FFmpeg has been automatically installed as a dependency."
        
        exit 0
        EOF
        chmod +x deb-package/DEBIAN/postinst
        
        # Create copyright file
        cat > deb-package/usr/share/doc/hwytvidgrabber/copyright << 'EOF'
        Format: https://www.debian.org/doc/packaging-manuals/copyright-format/1.0/
        Upstream-Name: HwYtVidGrabber
        Source: https://github.com/MalikHw/HwYtVidGrabber

        Files: *
        Copyright: 2025 MalikHw47
        License: MIT
        EOF
        
        # Create changelog with dynamic version
        cat > deb-package/usr/share/doc/hwytvidgrabber/changelog << EOF
        hwytvidgrabber ($VERSION) unstable; urgency=medium

          * HwYtVidGrabber v$VERSION by MalikHw47 - Binary package
          * Self-contained binary with all dependencies bundled
          * Automatically installs FFmpeg dependency
          * No virtual environment needed - everything is pre-compiled

         -- MalikHw47 <help.malicorporation@gmail.com>  $(date -R)
        EOF
        
        gzip deb-package/usr/share/doc/hwytvidgrabber/changelog
        
        # Build DEB package with version in filename
        dpkg-deb --build deb-package HwYtVidGrabber-${VERSION}_amd64.deb
        
        # Also create a generic name for compatibility
        cp HwYtVidGrabber-${VERSION}_amd64.deb HwYtVidGrabber-debian.deb
    
    - name: Upload DEB package
      uses: actions/upload-artifact@v4
      with:
        name: linux-deb
        path: |
          HwYtVidGrabber-*.deb

  create-release:
    needs: [build-windows, build-macos, build-linux-binary, build-linux-packages]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/

    - name: Organize artifacts for release
      run: |
        echo "Downloaded artifacts structure:"
        find artifacts/ -type f -ls
        
        # Create release directory
        mkdir -p release-files
        
        # Move files with proper verification
        if [ -f artifacts/windows-exe/HwYtVidGrabber-win.exe ]; then
          cp artifacts/windows-exe/HwYtVidGrabber-win.exe release-files/
          echo "✓ Windows exe found and copied"
        else
          echo "✗ Windows exe not found"
        fi
        
        if [ -f artifacts/macos-dmg/HwYtVidGrabber-Darwin.dmg ]; then
          cp artifacts/macos-dmg/HwYtVidGrabber-Darwin.dmg release-files/
          echo "✓ macOS dmg found and copied"
        else
          echo "✗ macOS dmg not found"
        fi
        
        if [ -f artifacts/linux-binary/HwYtVidGrabber-Linux ]; then
          cp artifacts/linux-binary/HwYtVidGrabber-Linux release-files/
          echo "✓ Linux binary found and copied"
        else
          echo "✗ Linux binary not found"
          find artifacts/ -name "*HwYtVidGrabber-Linux*" -type f
        fi
        
        if [ -f artifacts/linux-binary/hwytvidgrabber.desktop ]; then
          cp artifacts/linux-binary/hwytvidgrabber.desktop release-files/
          echo "✓ Desktop file found and copied"
        else
          echo "✗ Desktop file not found"
        fi
        
        if [ -f artifacts/linux-binary/icon.png ]; then
          cp artifacts/linux-binary/icon.png release-files/
          echo "✓ Icon found and copied"
        else
          echo "✗ Icon not found"
        fi
        
        # Copy all DEB files
        find artifacts/linux-deb/ -name "*.deb" -exec cp {} release-files/ \;
        
        echo "Final release files:"
        ls -la release-files/
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: release-files/*
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  update-aur:
    needs: [create-release, build-linux-binary]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Extract clean version
      id: get_version
      run: |
        # Extract version from tag and clean it for AUR
        RAW_VERSION=${GITHUB_REF#refs/tags/}
        # Remove 'v' prefix if present
        CLEAN_VERSION=${RAW_VERSION#v}
        # Replace any invalid characters for pkgver (no hyphens, colons, slashes, whitespace)
        CLEAN_VERSION=$(echo "$CLEAN_VERSION" | sed 's/[-:]/_/g' | sed 's/[[:space:]]//g' | sed 's/\//_/g')
        echo "version=$CLEAN_VERSION" >> $GITHUB_OUTPUT
        echo "raw_version=$RAW_VERSION" >> $GITHUB_OUTPUT
        echo "Clean version for AUR: $CLEAN_VERSION"
        echo "Raw version for URLs: $RAW_VERSION"

    - name: Setup SSH for AUR
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.AUR_SSH_KEY }}" > ~/.ssh/aur
        chmod 600 ~/.ssh/aur
        ssh-keyscan -H aur.archlinux.org >> ~/.ssh/known_hosts
        cat > ~/.ssh/config << EOF
        Host aur.archlinux.org
          HostName aur.archlinux.org
          User aur
          IdentityFile ~/.ssh/aur
        EOF

    - name: Clone AUR repository
      run: |
        git clone ssh://aur@aur.archlinux.org/hwytvidgrabber-bin.git aur-repo

    - name: Update AUR package with correct SHA256 hashes
      run: |
        cd aur-repo
        
        # Get versions
        CLEAN_VERSION="${{ steps.get_version.outputs.version }}"
        RAW_VERSION="${{ steps.get_version.outputs.raw_version }}"
        
        # Get the actual SHA256 hashes from the build job outputs
        BINARY_SHA256="${{ needs.build-linux-binary.outputs.linux-binary-sha256 }}"
        DESKTOP_SHA256="${{ needs.build-linux-binary.outputs.desktop-file-sha256 }}"
        ICON_SHA256="${{ needs.build-linux-binary.outputs.icon-sha256 }}"
        
        echo "Using SHA256 hashes:"
        echo "Binary: $BINARY_SHA256"
        echo "Desktop: $DESKTOP_SHA256" 
        echo "Icon: $ICON_SHA256"
        
        # Update PKGBUILD with correct hashes
        cat > PKGBUILD << EOF
        # Maintainer: MalikHw47 <help.malicorporation@gmail.com>
        pkgname=hwytvidgrabber-bin
        pkgver=${CLEAN_VERSION}
        pkgrel=1
        pkgdesc="A smol YouTube video downloader by MalikHw47 (Lightweight af)"
        arch=('x86_64')
        url="https://github.com/MalikHw/HwYtVidGrabber"
        license=('MIT')
        depends=('ffmpeg')
        provides=('hwytvidgrabber')
        conflicts=('hwytvidgrabber')
        source=("HwYtVidGrabber-Linux-\${pkgver}::\${url}/releases/latest/download/HwYtVidGrabber-Linux"
                "hwytvidgrabber.desktop::\${url}/releases/latest/download/hwytvidgrabber.desktop"
                "hwytvidgrabber.png::\${url}/releases/latest/download/icon.png")
        sha256sums=('${BINARY_SHA256}'
                    '${DESKTOP_SHA256}'
                    '${ICON_SHA256}')
        noextract=('HwYtVidGrabber-Linux-\${pkgver}')

        package() {
            # Install the binary
            install -Dm755 "\${srcdir}/HwYtVidGrabber-Linux-\${pkgver}" "\${pkgdir}/usr/bin/HwYtVidGrabber"
            
            # Install desktop file
            install -Dm644 "\${srcdir}/hwytvidgrabber.desktop" "\${pkgdir}/usr/share/applications/hwytvidgrabber.desktop"
            
            # Install icon
            install -Dm644 "\${srcdir}/hwytvidgrabber.png" "\${pkgdir}/usr/share/pixmaps/hwytvidgrabber.png"
        }
        EOF
        
        # Generate .SRCINFO
        # Install makepkg if not available
        if ! command -v makepkg &> /dev/null; then
            # Create .SRCINFO manually since makepkg might not be available
            cat > .SRCINFO << EOF
        pkgbase = hwytvidgrabber-bin
        	pkgdesc = A smol YouTube video downloader by MalikHw47 (Lightweight af)
        	pkgver = ${CLEAN_VERSION}
        	pkgrel = 1
        	url = https://github.com/MalikHw/HwYtVidGrabber
        	arch = x86_64
        	license = MIT
        	depends = ffmpeg
        	provides = hwytvidgrabber
        	conflicts = hwytvidgrabber
        	noextract = HwYtVidGrabber-Linux-${CLEAN_VERSION}
        	source = HwYtVidGrabber-Linux-${CLEAN_VERSION}::https://github.com/MalikHw/HwYtVidGrabber/releases/latest/download/HwYtVidGrabber-Linux
        	source = hwytvidgrabber.desktop::https://github.com/MalikHw/HwYtVidGrabber/releases/latest/download/hwytvidgrabber.desktop
        	source = hwytvidgrabber.png::https://github.com/MalikHw/HwYtVidGrabber/releases/latest/download/icon.png
        	sha256sums = ${BINARY_SHA256}
        	sha256sums = ${DESKTOP_SHA256}
        	sha256sums = ${ICON_SHA256}

        pkgname = hwytvidgrabber-bin
        EOF
        else
            makepkg --printsrcinfo > .SRCINFO
        fi
        
        # Configure Git
        git config user.name "MalikHw47"
        git config user.email "help.malicorporation@gmail.com"
        
        # Commit and push changes
        git add PKGBUILD .SRCINFO
        git commit -m "Update to version ${CLEAN_VERSION}" || echo "No changes to commit"
        git push origin master
