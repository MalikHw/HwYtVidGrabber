name: Build Self-Contained Multi-Platform Releases

permissions:
  contents: write
  pull-requests: write

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags like v1.0.0
  workflow_dispatch:  # Allow manual trigger

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        pip install -r requirements.txt
    
    - name: Build fully bundled Windows executable
      run: |
        pyinstaller --windowed --onefile --icon=icon.ico ^
        --add-data="icon.png;." --add-data="icon.ico;." ^
        --collect-all PyQt6 ^
        --collect-all PyQt6.QtCore ^
        --collect-all PyQt6.QtGui ^
        --collect-all PyQt6.QtWidgets ^
        --collect-submodules PyQt6 ^
        --hidden-import=PyQt6.sip ^
        --collect-all yt_dlp ^
        --collect-all certifi ^
        --collect-all urllib3 ^
        --collect-all requests ^
        --noconsole ^
        --name=HwYtVidGrabber ^
        HwYtVidGrabber.py
    
    - name: Upload Windows artifact
      uses: actions/upload-artifact@v4
      with:
        name: windows-exe
        path: dist/HwYtVidGrabber.exe

  build-macos:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        pip install -r requirements.txt
    
    - name: Build fully bundled macOS application
      run: |
        pyinstaller --windowed --onefile --icon=icon.ico \
        --add-data="icon.png:." --add-data="icon.ico:." \
        --collect-all PyQt6 \
        --collect-all PyQt6.QtCore \
        --collect-all PyQt6.QtGui \
        --collect-all PyQt6.QtWidgets \
        --collect-submodules PyQt6 \
        --hidden-import=PyQt6.sip \
        --collect-all yt_dlp \
        --collect-all certifi \
        --collect-all urllib3 \
        --collect-all requests \
        --name=HwYtVidGrabber \
        HwYtVidGrabber.py
        
        # Create proper .app bundle
        mkdir -p HwYtVidGrabber.app/Contents/MacOS
        mkdir -p HwYtVidGrabber.app/Contents/Resources
        
        # Move executable
        mv dist/HwYtVidGrabber HwYtVidGrabber.app/Contents/MacOS/
        chmod +x HwYtVidGrabber.app/Contents/MacOS/HwYtVidGrabber
        
        # Copy icon
        cp icon.png HwYtVidGrabber.app/Contents/Resources/icon.png
        
        # Create Info.plist
        cat > HwYtVidGrabber.app/Contents/Info.plist << 'EOF'
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>CFBundleExecutable</key>
            <string>HwYtVidGrabber</string>
            <key>CFBundleIconFile</key>
            <string>icon.png</string>
            <key>CFBundleIdentifier</key>
            <string>com.malikhw47.hwytvid-grabber</string>
            <key>CFBundleName</key>
            <string>HwYtVidGrabber</string>
            <key>CFBundlePackageType</key>
            <string>APPL</string>
            <key>CFBundleShortVersionString</key>
            <string>1.3</string>
            <key>CFBundleVersion</key>
            <string>1.3</string>
            <key>LSMinimumSystemVersion</key>
            <string>10.15</string>
            <key>NSHighResolutionCapable</key>
            <true/>
        </dict>
        </plist>
        EOF
    
    - name: Create DMG
      run: |
        # Create a temporary directory for the DMG contents
        mkdir -p dmg-contents
        
        # Copy the .app bundle to the DMG contents
        cp -R HwYtVidGrabber.app dmg-contents/
        
        # Create Applications symlink for easy installation
        ln -s /Applications dmg-contents/Applications
        
        # Create the DMG using hdiutil
        hdiutil create -volname "HwYtVidGrabber" \
                       -srcfolder dmg-contents \
                       -ov \
                       -format UDZO \
                       -imagekey zlib-level=9 \
                       HwYtVidGrabber.dmg
        
        # Verify the DMG was created
        ls -la HwYtVidGrabber.dmg
    
    - name: Upload macOS artifact
      uses: actions/upload-artifact@v4
      with:
        name: macos-dmg
        path: HwYtVidGrabber.dmg

  build-linux-appimage:
    runs-on: ubuntu-24.04
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install system dependencies and packaging tools
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-dev python3-pip build-essential
        # Install Qt6 dependencies for building
        sudo apt-get install -y qt6-base-dev qt6-tools-dev libqt6gui6 libqt6widgets6 libqt6core6
        sudo apt-get install -y qt6-qpa-plugins libqt6dbus6 libqt6network6 libqt6svg6
        # Install packaging tools
        sudo apt-get install -y debhelper dh-python devscripts fakeroot
        sudo apt-get install -y alien rpm2cpio cpio
        # Install AppImage tools
        sudo apt-get install -y zsync desktop-file-utils file
        # Install library copying tools
        sudo apt-get install -y patchelf
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        pip install -r requirements.txt
    
    - name: Build fully bundled Linux AppImage
      run: |
        # Build with all Qt6 libraries bundled
        pyinstaller --onefile --windowed --icon=icon.ico \
        --add-data="icon.png:." --add-data="icon.ico:." \
        --collect-all PyQt6 \
        --collect-all PyQt6.QtCore \
        --collect-all PyQt6.QtGui \
        --collect-all PyQt6.QtWidgets \
        --collect-submodules PyQt6 \
        --hidden-import=PyQt6.sip \
        --collect-all yt_dlp \
        --collect-all certifi \
        --collect-all urllib3 \
        --collect-all requests \
        --name=HwYtVidGrabber \
        HwYtVidGrabber.py
        
        # Download appimagetool-x86_64.AppImage
        wget -q https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
        chmod +x appimagetool-x86_64.AppImage
        
        # Create AppDir structure
        mkdir -p AppDir/usr/bin
        mkdir -p AppDir/usr/lib
        mkdir -p AppDir/usr/share/applications
        mkdir -p AppDir/usr/share/icons/hicolor/256x256/apps
        
        # Copy the bundled executable
        cp dist/HwYtVidGrabber AppDir/usr/bin/
        
        # Copy all Qt6 libraries that the executable depends on
        # This ensures complete self-containment
        ldd dist/HwYtVidGrabber | grep -E "(libQt6|libqt6)" | awk '{print $3}' | while read lib; do
            if [ -f "$lib" ]; then
                cp "$lib" AppDir/usr/lib/
            fi
        done
        
        # Copy additional Qt6 platform plugins and libraries
        QT6_LIB_PATH=$(python3 -c "import PyQt6; import os; print(os.path.dirname(PyQt6.__file__))")
        if [ -d "$QT6_LIB_PATH/Qt6/lib" ]; then
            cp -r "$QT6_LIB_PATH/Qt6/lib/"* AppDir/usr/lib/ 2>/dev/null || true
        fi
        if [ -d "$QT6_LIB_PATH/Qt6/plugins" ]; then
            mkdir -p AppDir/usr/plugins
            cp -r "$QT6_LIB_PATH/Qt6/plugins/"* AppDir/usr/plugins/ 2>/dev/null || true
        fi
        
        # Copy system Qt6 libraries as backup
        for lib in /usr/lib/x86_64-linux-gnu/libQt6*.so*; do
            if [ -f "$lib" ]; then
                cp "$lib" AppDir/usr/lib/ 2>/dev/null || true
            fi
        done
        
        # Create desktop file
        cat > AppDir/usr/share/applications/hwytvid-grabber.desktop << 'EOF'
        [Desktop Entry]
        Name=HwYtVidGrabber
        Comment=YouTube Video Downloader
        Exec=HwYtVidGrabber
        Icon=hwytvid-grabber
        Terminal=false
        Type=Application
        Categories=AudioVideo;Network;
        StartupWMClass=HwYtVidGrabber
        EOF
        
        # Copy desktop file to root
        cp AppDir/usr/share/applications/hwytvid-grabber.desktop AppDir/
        
        # Copy icons
        cp icon.png AppDir/usr/share/icons/hicolor/256x256/apps/hwytvid-grabber.png
        cp icon.png AppDir/hwytvid-grabber.png
        
        # Create AppRun with library path setup
        cat > AppDir/AppRun << 'EOF'
        #!/bin/bash
        HERE="$(dirname "$(readlink -f "${0}")")"
        export PATH="${HERE}/usr/bin:${PATH}"
        export LD_LIBRARY_PATH="${HERE}/usr/lib:${LD_LIBRARY_PATH}"
        export QT_PLUGIN_PATH="${HERE}/usr/plugins:${QT_PLUGIN_PATH}"
        export QT_QPA_PLATFORM_PLUGIN_PATH="${HERE}/usr/plugins/platforms"
        # Set Qt6 platform to xcb
        export QT_QPA_PLATFORM=xcb
        # Fallback platforms
        export QT_QPA_PLATFORM_PLUGIN_PATH="${HERE}/usr/plugins/platforms:/usr/lib/x86_64-linux-gnu/qt6/plugins/platforms"
        exec "${HERE}/usr/bin/HwYtVidGrabber" "$@"
        EOF
        chmod +x AppDir/AppRun
        
        # Build AppImage without FUSE requirement
        ARCH=x86_64 ./appimagetool-x86_64.AppImage --appimage-extract-and-run AppDir HwYtVidGrabber.AppImage
    
    - name: Upload AppImage
      uses: actions/upload-artifact@v4
      with:
        name: linux-appimage
        path: HwYtVidGrabber.AppImage

  build-linux-packages:
    needs: [build-linux-appimage]
    runs-on: ubuntu-24.04
    steps:
    - uses: actions/checkout@v4
    
    - name: Download AppImage
      uses: actions/download-artifact@v4
      with:
        name: linux-appimage
    
    - name: Extract AppImage and create packages
      run: |
        chmod +x HwYtVidGrabber.AppImage
        
        # Extract AppImage contents
        ./HwYtVidGrabber.AppImage --appimage-extract
        
        # Build .deb package using AppImage contents
        mkdir -p deb-package/DEBIAN
        mkdir -p deb-package/opt/hwytvid-grabber
        mkdir -p deb-package/usr/bin
        mkdir -p deb-package/usr/share/applications
        mkdir -p deb-package/usr/share/pixmaps
        mkdir -p deb-package/usr/share/doc/hwytvid-grabber
        
        # Copy all AppImage contents to /opt/hwytvid-grabber
        cp -r squashfs-root/* deb-package/opt/hwytvid-grabber/
        
        # Create wrapper script in /usr/bin
        cat > deb-package/usr/bin/hwytvid-grabber << 'EOF'
        #!/bin/bash
        exec /opt/hwytvid-grabber/AppRun "$@"
        EOF
        chmod +x deb-package/usr/bin/hwytvid-grabber
        
        # Copy desktop file and icon
        cp squashfs-root/hwytvid-grabber.desktop deb-package/usr/share/applications/
        cp squashfs-root/hwytvid-grabber.png deb-package/usr/share/pixmaps/
        
        # Fix desktop file Exec path
        sed -i 's/Exec=HwYtVidGrabber/Exec=hwytvid-grabber/' deb-package/usr/share/applications/hwytvid-grabber.desktop
        
        # Create control file with minimal dependencies
        cat > deb-package/DEBIAN/control << 'EOF'
        Package: hwytvid-grabber
        Version: 1.3
        Section: video
        Priority: optional
        Architecture: amd64
        Depends: fuse, libc6
        Maintainer: help.malicorporation@gmail.com
        Description: Self-contained YouTube Video Downloader
         A modern PyQt6-based YouTube video downloader with all dependencies bundled.
         This package includes all Qt6 libraries and Python dependencies.
         .
         Features include:
          - YouTube video downloading with yt-dlp
          - Modern PyQt6 interface (bundled)
          - Multiple format support (MP4, MP3, muted MP4)
          - Resolution selection up to 4K
          - Dark mode support
          - No external dependencies except FUSE and libc6
        Homepage: https://github.com/MalikHw47/HwYtVidGrabber
        EOF
        
        # Create copyright file
        cat > deb-package/usr/share/doc/hwytvid-grabber/copyright << 'EOF'
        Format: https://www.debian.org/doc/packaging-manuals/copyright-format/1.0/
        Upstream-Name: HwYtVidGrabber
        Source: https://github.com/MalikHw47/HwYtVidGrabber

        Files: *
        Copyright: 2024 MalikHw47
        License: MIT
        EOF
        
        # Create changelog
        cat > deb-package/usr/share/doc/hwytvid-grabber/changelog << 'EOF'
        hwytvid-grabber (1.3) unstable; urgency=medium

          * Release version 1.3 - Self-contained build
          * All Qt6 libraries bundled
          * All Python dependencies included
          * Only requires FUSE and libc6

         -- help.malicorporation@gmail.com  $(date -R)
        EOF
        
        gzip deb-package/usr/share/doc/hwytvid-grabber/changelog
        
        # Build DEB package
        dpkg-deb --build deb-package HwYtVidGrabber.deb
        
        # Build Arch Linux package using AppImage contents
        mkdir -p arch-package/pkg/opt/hwytvid-grabber
        mkdir -p arch-package/pkg/usr/bin
        mkdir -p arch-package/pkg/usr/share/applications
        mkdir -p arch-package/pkg/usr/share/pixmaps
        
        # Copy AppImage contents
        cp -r squashfs-root/* arch-package/pkg/opt/hwytvid-grabber/
        
        # Copy wrapper script
        cp deb-package/usr/bin/hwytvid-grabber arch-package/pkg/usr/bin/
        
        # Copy desktop file and icon
        cp deb-package/usr/share/applications/hwytvid-grabber.desktop arch-package/pkg/usr/share/applications/
        cp deb-package/usr/share/pixmaps/hwytvid-grabber.png arch-package/pkg/usr/share/pixmaps/
        
        # Create .PKGINFO with minimal dependencies
        cat > arch-package/pkg/.PKGINFO << 'EOF'
        pkgname = hwytvid-grabber
        pkgbase = hwytvid-grabber
        pkgver = 1.3-1
        pkgdesc = Self-contained YouTube Video Downloader with all dependencies bundled
        url = https://github.com/MalikHw47/HwYtVidGrabber
        arch = x86_64
        license = MIT
        depend = fuse
        depend = glibc
        EOF
        
        # Create package archive
        cd arch-package/pkg
        tar -czf ../../HwYtVidGrabber.pkg.tar.gz .PKGINFO opt/ usr/
    
    - name: Upload DEB package
      uses: actions/upload-artifact@v4
      with:
        name: linux-deb
        path: HwYtVidGrabber.deb
    
    - name: Upload Arch package
      uses: actions/upload-artifact@v4
      with:
        name: linux-arch
        path: HwYtVidGrabber.pkg.tar.gz

  create-release:
    needs: [build-windows, build-macos, build-linux-appimage, build-linux-packages]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          windows-exe/HwYtVidGrabber.exe
          macos-dmg/HwYtVidGrabber.dmg
          linux-deb/HwYtVidGrabber.deb
          linux-arch/HwYtVidGrabber.pkg.tar.gz
          linux-appimage/HwYtVidGrabber.AppImage
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
