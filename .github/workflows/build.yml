name: Build Self-Contained Multi-Platform Releases

permissions:
  contents: write
  pull-requests: write

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags like v1.0.0
  workflow_dispatch:  # Allow manual trigger

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        pip install -r requirements.txt
    
    - name: Build fully bundled Windows executable
      run: |
        pyinstaller --windowed --onefile --icon=icon.ico --add-data="icon.png;." --add-data="icon.ico;." --collect-submodules PyQt6.QtCore --collect-submodules PyQt6.QtGui --collect-submodules PyQt6.QtWidgets --hidden-import=PyQt6.sip --collect-all yt_dlp --noconsole --name=HwYtVidGrabber HwYtVidGrabber.py
    
    - name: Upload Windows artifact
      uses: actions/upload-artifact@v4
      with:
        name: windows-exe
        path: dist/HwYtVidGrabber.exe

  build-macos:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        pip install -r requirements.txt
    
    - name: Build fully bundled macOS application
      run: |
        pyinstaller --windowed --onefile --icon=icon.ico \
        --add-data="icon.png:." --add-data="icon.ico:." \
        --collect-submodules PyQt6.QtCore \
        --collect-submodules PyQt6.QtGui \
        --collect-submodules PyQt6.QtWidgets \
        --hidden-import=PyQt6.sip \
        --collect-all yt_dlp \
        --name=HwYtVidGrabber \
        HwYtVidGrabber.py
        
        # Create proper .app bundle
        mkdir -p HwYtVidGrabber.app/Contents/MacOS
        mkdir -p HwYtVidGrabber.app/Contents/Resources
        
        # Move executable
        mv dist/HwYtVidGrabber HwYtVidGrabber.app/Contents/MacOS/
        chmod +x HwYtVidGrabber.app/Contents/MacOS/HwYtVidGrabber
        
        # Copy icon
        cp icon.png HwYtVidGrabber.app/Contents/Resources/icon.png
        
        # Create Info.plist
        cat > HwYtVidGrabber.app/Contents/Info.plist << 'EOF'
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>CFBundleExecutable</key>
            <string>HwYtVidGrabber</string>
            <key>CFBundleIconFile</key>
            <string>icon.png</string>
            <key>CFBundleIdentifier</key>
            <string>com.malikhw47.HwYtVidGrabber</string>
            <key>CFBundleName</key>
            <string>HwYtVidGrabber</string>
            <key>CFBundlePackageType</key>
            <string>APPL</string>
            <key>CFBundleShortVersionString</key>
            <string>1.3</string>
            <key>CFBundleVersion</key>
            <string>1.3</string>
            <key>LSMinimumSystemVersion</key>
            <string>10.15</string>
            <key>NSHighResolutionCapable</key>
            <true/>
        </dict>
        </plist>
        EOF
    
    - name: Create DMG
      run: |
        # Create a temporary directory for the DMG contents
        mkdir -p dmg-contents
        
        # Copy the .app bundle to the DMG contents
        cp -R HwYtVidGrabber.app dmg-contents/
        
        # Create Applications symlink for easy installation
        ln -s /Applications dmg-contents/Applications
        
        # Create the DMG using hdiutil
        hdiutil create -volname "HwYtVidGrabber" \
                       -srcfolder dmg-contents \
                       -ov \
                       -format UDZO \
                       -imagekey zlib-level=9 \
                       HwYtVidGrabber.dmg
        
        # Verify the DMG was created
        ls -la HwYtVidGrabber.dmg
    
    - name: Upload macOS artifact
      uses: actions/upload-artifact@v4
      with:
        name: macos-dmg
        path: HwYtVidGrabber.dmg

  build-linux-packages:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install packaging tools
      run: |
        sudo apt-get update
        sudo apt-get install -y debhelper dh-python devscripts fakeroot
    
    - name: Create lightweight DEB package
      run: |
        # Verify icon.png exists in the repo root
        if [ ! -f icon.png ]; then
            echo "Error: icon.png not found in repository root!"
            exit 1
        fi
        
        # Build .deb package with ONLY Python file
        mkdir -p deb-package/DEBIAN
        mkdir -p deb-package/opt/HwYtVidGrabber
        mkdir -p deb-package/usr/bin
        mkdir -p deb-package/usr/share/applications
        mkdir -p deb-package/usr/share/pixmaps
        mkdir -p deb-package/usr/share/doc/HwYtVidGrabber
        
        # Copy ONLY the Python source file and icons
        cp HwYtVidGrabber.py deb-package/opt/HwYtVidGrabber/
        cp icon.png deb-package/opt/HwYtVidGrabber/
        cp icon.ico deb-package/opt/HwYtVidGrabber/
        
        # Copy icon to pixmaps directory with proper name
        cp icon.png deb-package/usr/share/pixmaps/HwYtVidGrabber.png
        
        # Create wrapper script that uses virtual environment
        cat > deb-package/usr/bin/HwYtVidGrabber << 'EOF'
        #!/bin/bash
        # HwYtVidGrabber wrapper script with virtual environment
        
        VENV_DIR="/opt/HwYtVidGrabber/venv"
        
        # Set Qt6 platform and run the application
        export QT_QPA_PLATFORM=xcb
        cd /opt/HwYtVidGrabber
        exec "$VENV_DIR/bin/python" HwYtVidGrabber.py "$@"
        EOF
        chmod +x deb-package/usr/bin/HwYtVidGrabber
        
        # Create desktop file
        cat > deb-package/usr/share/applications/HwYtVidGrabber.desktop << 'EOF'
        [Desktop Entry]
        Name=HwYtVidGrabber
        Comment=HwYtVidGrabber - YouTube Video Downloader by MalikHw47
        Exec=HwYtVidGrabber
        Icon=HwYtVidGrabber
        Terminal=false
        Type=Application
        Categories=AudioVideo;Network;
        StartupWMClass=HwYtVidGrabber
        EOF
        
        # Create control file with minimal dependencies
        cat > deb-package/DEBIAN/control << 'EOF'
        Package: HwYtVidGrabber
        Version: 1.3
        Section: video
        Priority: optional
        Architecture: amd64
        Depends: python3, qt6-qpa-plugins, libqt6gui6, libqt6widgets6, libqt6core6, python3-venv, python3-pip, libxcb-cursor0, libxcb-cursor-dev
        Maintainer: MalikHw47 <help.malicorporation@gmail.com>
        Description: HwYtVidGrabber - YouTube Video Downloader by MalikHw47
         HwYtVidGrabber is a lightweight PyQt6-based YouTube video downloader 
         created by MalikHw47 that uses system libraries and virtual environment.
         This package automatically creates a virtual environment and installs yt-dlp during installation.
         .
         Features include:
          - YouTube video downloading with yt-dlp (installed during package setup)
          - Modern PyQt6 interface (uses system libraries)
          - Multiple format support (MP4, MP3, muted MP4)
          - Resolution selection up to 4K
          - Dark mode support
        Homepage: https://github.com/MalikHw47/HwYtVidGrabber
        EOF
        
        # Create postinst script to create venv and install yt-dlp
        cat > deb-package/DEBIAN/postinst << 'EOF'
        #!/bin/bash
        set -e
        
        VENV_DIR="/opt/HwYtVidGrabber/venv"
        
        echo "Creating HwYtVidGrabber virtual environment..."
        
        # Create virtual environment in /opt/HwYtVidGrabber/venv
        python3 -m venv "$VENV_DIR"
        
        # Install yt-dlp in the virtual environment 
        "$VENV_DIR/bin/pip" install --upgrade pip
        "$VENV_DIR/bin/pip" install yt-dlp pyqt6
        
        # Make sure venv directory has proper permissions
        chown -R root:root "$VENV_DIR"
        chmod -R 755 "$VENV_DIR"
        
        # Update desktop database
        if [ -x /usr/bin/update-desktop-database ]; then
            /usr/bin/update-desktop-database /usr/share/applications
        fi
        
        echo "HwYtVidGrabber installed successfully with virtual environment!"
        
        exit 0
        EOF
        chmod +x deb-package/DEBIAN/postinst
        
        # Create copyright file
        cat > deb-package/usr/share/doc/HwYtVidGrabber/copyright << 'EOF'
        Format: https://www.debian.org/doc/packaging-manuals/copyright-format/1.0/
        Upstream-Name: HwYtVidGrabber
        Source: https://github.com/MalikHw47/HwYtVidGrabber

        Files: *
        Copyright: 2024 MalikHw47
        License: MIT
        EOF
        
        # Create changelog
        cat > deb-package/usr/share/doc/HwYtVidGrabber/changelog << 'EOF'
        HwYtVidGrabber (1.3) unstable; urgency=medium

          * HwYtVidGrabber v1.3 by MalikHw47 - Virtual environment package
          * Uses system Qt6 packages and creates isolated virtual environment during installation
          * Only contains Python source file for minimal size
          * Automatically creates venv and installs yt-dlp during package installation

         -- MalikHw47 <help.malicorporation@gmail.com>  $(date -R)
        EOF
        
        gzip deb-package/usr/share/doc/HwYtVidGrabber/changelog
        
        # Build DEB package
        dpkg-deb --build deb-package HwYtVidGrabber.deb
    
    - name: Create lightweight Arch package
      run: |
        # Verify icon.png exists in the repo root
        if [ ! -f icon.png ]; then
            echo "Error: icon.png not found in repository root!"
            exit 1
        fi
        
        # Build Arch Linux package with ONLY Python file
        mkdir -p arch-package/pkg/opt/HwYtVidGrabber
        mkdir -p arch-package/pkg/usr/bin
        mkdir -p arch-package/pkg/usr/share/applications
        mkdir -p arch-package/pkg/usr/share/pixmaps
        
        # Copy ONLY the Python source file and icons
        cp HwYtVidGrabber.py arch-package/pkg/opt/HwYtVidGrabber/
        cp icon.png arch-package/pkg/opt/HwYtVidGrabber/
        cp icon.ico arch-package/pkg/opt/HwYtVidGrabber/
        
        # Copy icon to pixmaps directory with proper name
        cp icon.png arch-package/pkg/usr/share/pixmaps/HwYtVidGrabber.png
        
        # Create wrapper script that uses virtual environment
        cat > arch-package/pkg/usr/bin/HwYtVidGrabber << 'EOF'
        #!/bin/bash
        # HwYtVidGrabber wrapper script with virtual environment
        
        VENV_DIR="/opt/HwYtVidGrabber/venv"
        
        # Set Qt6 platform and run the application
        export QT_QPA_PLATFORM=xcb
        cd /opt/HwYtVidGrabber
        exec "$VENV_DIR/bin/python" HwYtVidGrabber.py "$@"
        EOF
        chmod +x arch-package/pkg/usr/bin/HwYtVidGrabber
        
        # Create desktop file
        cat > arch-package/pkg/usr/share/applications/HwYtVidGrabber.desktop << 'EOF'
        [Desktop Entry]
        Name=HwYtVidGrabber
        Comment=HwYtVidGrabber - YouTube Video Downloader by MalikHw47
        Exec=HwYtVidGrabber
        Icon=HwYtVidGrabber
        Terminal=false
        Type=Application
        Categories=AudioVideo;Network;
        StartupWMClass=HwYtVidGrabber
        EOF
        
        # Create .PKGINFO with minimal dependencies
        cat > arch-package/pkg/.PKGINFO << 'EOF'
        pkgname = HwYtVidGrabber
        pkgbase = HwYtVidGrabber
        pkgver = 1.3-1
        pkgdesc = HwYtVidGrabber - YouTube Video Downloader by MalikHw47
        url = https://github.com/MalikHw47/HwYtVidGrabber
        arch = x86_64
        license = MIT
        depend = python
        depend = python-pyqt6
        depend = qt6-base
        depend = python-pip
        EOF
        
        # Create install script for creating venv during installation
        cat > arch-package/pkg/.INSTALL << 'EOF'
        post_install() {
            VENV_DIR="/opt/HwYtVidGrabber/venv"
            
            echo "Creating HwYtVidGrabber virtual environment..."
            
            # Create virtual environment in /opt/HwYtVidGrabber/venv
            python -m venv "$VENV_DIR"
            
            # Install yt-dlp in the virtual environment 
            "$VENV_DIR/bin/pip" install --upgrade pip
            "$VENV_DIR/bin/pip" install yt-dlp
            
            # Make sure venv directory has proper permissions
            chown -R root:root "$VENV_DIR"
            chmod -R 755 "$VENV_DIR"
            
            echo "HwYtVidGrabber installed successfully with virtual environment!"
        }

        post_upgrade() {
            post_install
        }
        EOF
        
        # Create package archive
        cd arch-package/pkg
        tar -czf ../../HwYtVidGrabber.pkg.tar.gz .PKGINFO .INSTALL opt/ usr/
    
    - name: Upload DEB package
      uses: actions/upload-artifact@v4
      with:
        name: linux-deb
        path: HwYtVidGrabber.deb
    
    - name: Upload Arch package
      uses: actions/upload-artifact@v4
      with:
        name: linux-arch
        path: HwYtVidGrabber.pkg.tar.gz

  build-pypi:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Extract version from tag
      id: get_version
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
        else
          echo "version=0.0.0" >> $GITHUB_OUTPUT
        fi
    
    - name: Prepare PyPI package structure
      run: |
        # Create a temporary directory for PyPI package
        mkdir -p pypi-build
        
        # Copy PyPI folder contents if it exists
        if [ -d "PyPI" ]; then
          cp -r PyPI/* pypi-build/
        fi
        
        # Copy the main Python file to the PyPI build directory
        cp HwYtVidGrabber.py pypi-build/
        
        # Copy additional required files
        if [ -f "README.md" ]; then
          cp README.md pypi-build/
        fi
        if [ -f "LICENSE" ]; then
          cp LICENSE pypi-build/
        fi
        if [ -f "icon.png" ]; then
          cp icon.png pypi-build/
        fi
        if [ -f "icon.ico" ]; then
          cp icon.ico pypi-build/
        fi
        
        # Update version in setup files if they exist
        if [ -f "pypi-build/setup.py" ]; then
          sed -i "s/version=\"[^\"]*\"/version=\"${{ steps.get_version.outputs.version }}\"/g" pypi-build/setup.py
        fi
        if [ -f "pypi-build/pyproject.toml" ]; then
          sed -i "s/version = \"[^\"]*\"/version = \"${{ steps.get_version.outputs.version }}\"/g" pypi-build/pyproject.toml
        fi
        
        # If no setup files exist in PyPI folder, use the ones from repo root
        if [ ! -f "pypi-build/setup.py" ] && [ -f "setup.py" ]; then
          cp setup.py pypi-build/
          sed -i "s/version=\"[^\"]*\"/version=\"${{ steps.get_version.outputs.version }}\"/g" pypi-build/setup.py
        fi
        if [ ! -f "pypi-build/pyproject.toml" ] && [ -f "pyproject.toml" ]; then
          cp pyproject.toml pypi-build/
          sed -i "s/version = \"[^\"]*\"/version = \"${{ steps.get_version.outputs.version }}\"/g" pypi-build/pyproject.toml
        fi
        
        ls -la pypi-build/
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine wheel setuptools
    
    - name: Build PyPI packages
      run: |
        cd pypi-build
        python -m build
        ls -la dist/
    
    - name: Upload PyPI artifacts
      uses: actions/upload-artifact@v4
      with:
        name: pypi-packages
        path: pypi-build/dist/*
    
    - name: Publish to PyPI
      if: startsWith(github.ref, 'refs/tags/')
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        cd pypi-build
        python -m twine upload dist/* --verbose

  create-release:
    needs: [build-windows, build-macos, build-linux-packages, build-pypi]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          windows-exe/HwYtVidGrabber.exe
          macos-dmg/HwYtVidGrabber.dmg
          linux-deb/HwYtVidGrabber.deb
          linux-arch/HwYtVidGrabber.pkg.tar.gz
          pypi-packages/*.whl
          pypi-packages/*.tar.gz
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
