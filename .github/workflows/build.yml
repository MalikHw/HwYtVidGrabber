name: Build Multi-Platform Releases

permissions:
  contents: write
  pull-requests: write

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags like v1.0.0
  workflow_dispatch:  # Allow manual trigger

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        pip install -r requirements.txt
    
    - name: Build Windows executable
      run: |
        pyinstaller --no-console --onefile --icon=icon.ico --add-data="icon.png;." --add-data="icon.ico;." HwYtVidGrabber.py
    
    - name: Upload Windows artifact
      uses: actions/upload-artifact@v4
      with:
        name: windows-exe
        path: dist/HwYtVidGrabber.exe

  build-macos:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        pip install -r requirements.txt
    
    - name: Build macOS executable
      run: |
        pyinstaller --no-console --onefile --icon=icon.ico --add-data="icon.png:." --add-data="icon.ico:." HwYtVidGrabber.py
        mv dist/HwYtVidGrabber dist/HwYtVidGrabber-macOS
    
    - name: Upload macOS artifact
      uses: actions/upload-artifact@v4
      with:
        name: macos-app
        path: dist/HwYtVidGrabber-macOS

  build-linux:
    runs-on: ubuntu-24.04
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install system dependencies and Qt6
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-dev python3-pip build-essential
        # Install complete Qt6 with all platform plugins and dependencies
        sudo apt-get install -y qt6-base-dev qt6-tools-dev libqt6gui6 libqt6widgets6 libqt6core6
        sudo apt-get install -y qt6-qpa-plugins libqt6dbus6 libqt6network6 libqt6svg6
        # Install all XCB dependencies to bundle them
        sudo apt-get install -y libxcb-cursor0 libxcb-cursor-dev libxcb1-dev libxcb-util1
        sudo apt-get install -y libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-randr0
        sudo apt-get install -y libxcb-render-util0 libxcb-shape0 libxcb-xfixes0 libxcb-xinerama0
        sudo apt-get install -y libxcb-xkb1 libxkbcommon-x11-0 libxkbcommon0 libxkbcommon-dev
        # Additional Qt platform support  
        sudo apt-get install -y libqt6waylandclient6 libqt6waylandcompositor6
        # OpenGL support
        sudo apt-get install -y libgl1-mesa-dev libglu1-mesa-dev mesa-common-dev
        sudo apt-get install -y patchelf
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        pip install -r requirements.txt
    
    - name: Create comprehensive PyInstaller spec for Linux
      run: |
        cat > HwYtVidGrabber-linux.spec << 'EOF'
        # -*- mode: python ; coding: utf-8 -*-
        import sys
        import os
        import glob
        from PyInstaller.utils.hooks import collect_all, collect_submodules

        block_cipher = None

        # Collect all PyQt6 data and binaries
        datas = []
        binaries = []
        hiddenimports = []

        # Collect PyQt6 completely
        tmp_ret = collect_all('PyQt6')
        datas += tmp_ret[0]; binaries += tmp_ret[1]; hiddenimports += tmp_ret[2]

        # Collect yt-dlp completely  
        tmp_ret = collect_all('yt_dlp')
        datas += tmp_ret[0]; binaries += tmp_ret[1]; hiddenimports += tmp_ret[2]

        # Find and bundle ALL Qt6 platform plugins and libraries
        qt6_base_paths = [
            '/usr/lib/x86_64-linux-gnu/qt6',
            '/usr/lib/qt6',
            '/usr/share/qt6'
        ]

        for qt_path in qt6_base_paths:
            if os.path.exists(qt_path):
                # Platform plugins (CRITICAL for Qt to work)
                platforms_path = os.path.join(qt_path, 'plugins', 'platforms')
                if os.path.exists(platforms_path):
                    for plugin in glob.glob(f'{platforms_path}/*'):
                        if os.path.isfile(plugin):
                            binaries.append((plugin, 'PyQt6/Qt6/plugins/platforms/'))
                
                # Platform themes
                themes_path = os.path.join(qt_path, 'plugins', 'platformthemes')
                if os.path.exists(themes_path):
                    for plugin in glob.glob(f'{themes_path}/*'):
                        if os.path.isfile(plugin):
                            binaries.append((plugin, 'PyQt6/Qt6/plugins/platformthemes/'))
                
                # XCB GL integrations
                xcb_path = os.path.join(qt_path, 'plugins', 'xcbglintegrations')
                if os.path.exists(xcb_path):
                    for plugin in glob.glob(f'{xcb_path}/*'):
                        if os.path.isfile(plugin):
                            binaries.append((plugin, 'PyQt6/Qt6/plugins/xcbglintegrations/'))

        # Bundle ALL XCB and cursor libraries
        lib_paths = ['/usr/lib/x86_64-linux-gnu', '/usr/lib', '/lib/x86_64-linux-gnu']
        xcb_libs = [
            'libxcb-cursor.so*', 'libxcb.so*', 'libxcb-util.so*',
            'libxcb-icccm.so*', 'libxcb-image.so*', 'libxcb-keysyms.so*',
            'libxcb-randr.so*', 'libxcb-render-util.so*', 'libxcb-shape.so*',
            'libxcb-xfixes.so*', 'libxcb-xinerama.so*', 'libxcb-xkb.so*',
            'libXcursor.so*', 'libxkbcommon.so*', 'libxkbcommon-x11.so*'
        ]

        for lib_path in lib_paths:
            if os.path.exists(lib_path):
                for lib_pattern in xcb_libs:
                    for lib_file in glob.glob(os.path.join(lib_path, lib_pattern)):
                        if os.path.isfile(lib_file):
                            binaries.append((lib_file, '.'))

        a = Analysis(
            ['HwYtVidGrabber.py'],
            pathex=[],
            binaries=binaries,
            datas=datas + [
                ('icon.png', '.'),
                ('icon.ico', '.'),
            ],
            hiddenimports=hiddenimports + [
                'PyQt6.QtCore',
                'PyQt6.QtGui', 
                'PyQt6.QtWidgets',
                'PyQt6.QtNetwork',
                'yt_dlp',
                'yt_dlp.extractor',
                'yt_dlp.postprocessor',
            ],
            hookspath=[],
            hooksconfig={},
            runtime_hooks=[],
            excludes=[
                'tkinter',
                'matplotlib',
                'numpy',
                'scipy',
            ],
            win_no_prefer_redirects=False,
            win_private_assemblies=False,
            cipher=block_cipher,
            noarchive=False,
        )

        pyz = PYZ(a.pure, a.zipped_data, cipher=block_cipher)

        exe = EXE(
            pyz,
            a.scripts,
            a.binaries,
            a.zipfiles,
            a.datas,
            [],
            name='HwYtVidGrabber',
            debug=False,
            bootloader_ignore_signals=False,
            strip=False,
            upx=False,
            upx_exclude=[],
            runtime_tmpdir=None,
            console=False,
            disable_windowed_traceback=False,
            argv_emulation=False,
            target_arch=None,
            codesign_identity=None,
            entitlements_file=None,
            icon='icon.ico',
        )
        EOF
    
    - name: Build Linux executable with all dependencies bundled
      run: |
        pyinstaller HwYtVidGrabber-linux.spec
        # Set proper permissions and rpath
        chmod +x dist/HwYtVidGrabber
        # Use patchelf to ensure the binary can find bundled libraries
        patchelf --set-rpath '$ORIGIN:$ORIGIN/lib' dist/HwYtVidGrabber 2>/dev/null || true
    
    - name: Upload Linux artifact
      uses: actions/upload-artifact@v4
      with:
        name: linux-exe
        path: dist/HwYtVidGrabber

  create-release:
    needs: [build-windows, build-macos, build-linux]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          windows-exe/HwYtVidGrabber.exe
          macos-app/HwYtVidGrabber-macOS
          linux-exe/HwYtVidGrabber
        draft: false
        prerelease: false
        body: |
          # HwYtVidGrabber Release
          
          Created by MalikHw47
          
          ## Downloads:
          
          ### Windows
          - **HwYtVidGrabber.exe** - Standalone Windows executable
          
          ### macOS  
          - **HwYtVidGrabber-macOS** - Standalone macOS executable
            ```bash
            chmod +x HwYtVidGrabber-macOS
            ./HwYtVidGrabber-macOS
            ```
          
          ### Linux
          - **HwYtVidGrabber** - Standalone Linux executable (all dependencies bundled)
            ```bash
            chmod +x HwYtVidGrabber
            ./HwYtVidGrabber
            ```
          
          ## Features:
          - YouTube video downloading with yt-dlp
          - Modern PyQt6 interface
          - Multiple format support (MP4, MP3, muted MP4)
          - Resolution selection up to 4K
          - Cross-platform support
          - Dark mode support
          - **All Qt dependencies bundled - no additional installation required**
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
