name: Build Self-Contained Multi-Platform Releases

permissions:
  contents: write
  pull-requests: write

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags like v1.0.0
  workflow_dispatch:  # Allow manual trigger

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        pip install -r requirements.txt
    
    - name: Build fully bundled Windows executable
      run: |
        pyinstaller --windowed --onefile --icon=icon.ico --add-data="icon.png;." --add-data="icon.ico;." --collect-submodules PyQt6.QtCore --collect-submodules PyQt6.QtGui --collect-submodules PyQt6.QtWidgets --hidden-import=PyQt6.sip --collect-all yt_dlp --noconsole --name=HwYtVidGrabber HwYtVidGrabber.py
    
    - name: Upload Windows artifact
      uses: actions/upload-artifact@v4
      with:
        name: windows-exe
        path: dist/HwYtVidGrabber.exe

  build-macos:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        pip install -r requirements.txt
    
    - name: Build fully bundled macOS application
      run: |
        pyinstaller --windowed --onefile --icon=icon.ico \
        --add-data="icon.png:." --add-data="icon.ico:." \
        --collect-submodules PyQt6.QtCore \
        --collect-submodules PyQt6.QtGui \
        --collect-submodules PyQt6.QtWidgets \
        --hidden-import=PyQt6.sip \
        --collect-all yt_dlp \
        --name=HwYtVidGrabber \
        HwYtVidGrabber.py
        
        # Create proper .app bundle
        mkdir -p HwYtVidGrabber.app/Contents/MacOS
        mkdir -p HwYtVidGrabber.app/Contents/Resources
        
        # Move executable
        mv dist/HwYtVidGrabber HwYtVidGrabber.app/Contents/MacOS/
        chmod +x HwYtVidGrabber.app/Contents/MacOS/HwYtVidGrabber
        
        # Copy icon
        cp icon.png HwYtVidGrabber.app/Contents/Resources/icon.png
        
        # Create Info.plist
        cat > HwYtVidGrabber.app/Contents/Info.plist << 'EOF'
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>CFBundleExecutable</key>
            <string>HwYtVidGrabber</string>
            <key>CFBundleIconFile</key>
            <string>icon.png</string>
            <key>CFBundleIdentifier</key>
            <string>com.malikhw47.HwYtVidGrabber</string>
            <key>CFBundleName</key>
            <string>HwYtVidGrabber</string>
            <key>CFBundlePackageType</key>
            <string>APPL</string>
            <key>CFBundleShortVersionString</key>
            <string>1.3</string>
            <key>CFBundleVersion</key>
            <string>1.3</string>
            <key>LSMinimumSystemVersion</key>
            <string>10.15</string>
            <key>NSHighResolutionCapable</key>
            <true/>
        </dict>
        </plist>
        EOF
    
    - name: Create DMG
      run: |
        # Create a temporary directory for the DMG contents
        mkdir -p dmg-contents
        
        # Copy the .app bundle to the DMG contents
        cp -R HwYtVidGrabber.app dmg-contents/
        
        # Create Applications symlink for easy installation
        ln -s /Applications dmg-contents/Applications
        
        # Create the DMG using hdiutil
        hdiutil create -volname "HwYtVidGrabber" \
                       -srcfolder dmg-contents \
                       -ov \
                       -format UDZO \
                       -imagekey zlib-level=9 \
                       HwYtVidGrabber.dmg
        
        # Verify the DMG was created
        ls -la HwYtVidGrabber.dmg
    
    - name: Upload macOS artifact
      uses: actions/upload-artifact@v4
      with:
        name: macos-dmg
        path: HwYtVidGrabber.dmg

  build-linux-appimage:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install system dependencies and Qt6
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-dev python3-pip build-essential
        # Install Qt6 from apt with all plugins and dev tools
        sudo apt-get install -y pyqt6-dev pyqt6-dev-tools python3-pyqt6
        sudo apt-get install -y qt6-base-dev qt6-tools-dev qt6-qpa-plugins
        sudo apt-get install -y libqt6gui6 libqt6widgets6 libqt6core6 libqt6dbus6 libqt6network6 libqt6svg6
        # Install xcb and platform libraries
        sudo apt-get install -y libxcb1 libxcb-xinerama0 libxcb-cursor0 libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-randr0 libxcb-render-util0 libxcb-shape0 libxcb-sync1 libxcb-xfixes0 libxcb-xkb1
        # Install packaging tools
        sudo apt-get install -y debhelper dh-python devscripts fakeroot alien rpm2cpio cpio
        sudo apt-get install -y zsync desktop-file-utils file patchelf
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller PyQt6 PyQt6-Qt6 yt-dlp requests
        pip install -r requirements.txt
    
    - name: Build fully bundled Linux AppImage
      run: |
        # Build with PyInstaller
        pyinstaller --onefile --windowed --icon=icon.ico \
        --add-data="icon.png:." --add-data="icon.ico:." \
        --collect-submodules PyQt6.QtCore \
        --collect-submodules PyQt6.QtGui \
        --collect-submodules PyQt6.QtWidgets \
        --hidden-import=PyQt6.sip \
        --collect-all yt_dlp \
        --name=HwYtVidGrabber \
        HwYtVidGrabber.py
        
        # Download appimagetool
        wget -q https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
        chmod +x appimagetool-x86_64.AppImage
        
        # Create AppDir structure
        mkdir -p AppDir/usr/bin
        mkdir -p AppDir/usr/lib
        mkdir -p AppDir/usr/plugins/platforms
        mkdir -p AppDir/usr/plugins/platformthemes
        mkdir -p AppDir/usr/plugins/xcbglintegrations
        mkdir -p AppDir/usr/share/applications
        mkdir -p AppDir/usr/share/icons/hicolor/256x256/apps
        
        # Copy the bundled executable
        cp dist/HwYtVidGrabber AppDir/usr/bin/
        
        # Find and copy ALL Qt6 libraries that the executable depends on
        echo "Copying Qt6 libraries..."
        ldd dist/HwYtVidGrabber | grep -E "(libQt6|libqt6)" | awk '{print $3}' | while read lib; do
            if [ -f "$lib" ]; then
                echo "Copying Qt6 lib: $lib"
                cp "$lib" AppDir/usr/lib/
            fi
        done
        
        # Copy additional Qt6 libraries from system
        for lib in /usr/lib/x86_64-linux-gnu/libQt6*.so*; do
            if [ -f "$lib" ]; then
                echo "Copying system Qt6 lib: $lib"
                cp "$lib" AppDir/usr/lib/ 2>/dev/null || true
            fi
        done
        
        # Copy xcb and related libraries
        echo "Copying XCB libraries..."
        for lib in /usr/lib/x86_64-linux-gnu/libxcb*.so*; do
            if [ -f "$lib" ]; then
                echo "Copying XCB lib: $lib"
                cp "$lib" AppDir/usr/lib/ 2>/dev/null || true
            fi
        done
        
        # Copy Qt6 platform plugins (THE IMPORTANT PART!)
        echo "Copying Qt6 platform plugins..."
        QT6_PLUGINS_PATH=$(python3 -c "import PyQt6.QtCore; import os; print(os.path.join(os.path.dirname(PyQt6.QtCore.__file__), 'Qt6', 'plugins'))" 2>/dev/null || echo "")
        
        # Try multiple possible Qt6 plugin locations
        for plugin_base in "$QT6_PLUGINS_PATH" "/usr/lib/x86_64-linux-gnu/qt6/plugins" "/usr/lib/qt6/plugins"; do
            if [ -d "$plugin_base/platforms" ]; then
                echo "Found Qt6 plugins at: $plugin_base"
                cp -r "$plugin_base/platforms/"* AppDir/usr/plugins/platforms/ 2>/dev/null || true
                cp -r "$plugin_base/platformthemes/"* AppDir/usr/plugins/platformthemes/ 2>/dev/null || true
                cp -r "$plugin_base/xcbglintegrations/"* AppDir/usr/plugins/xcbglintegrations/ 2>/dev/null || true
                break
            fi
        done
        
        # Ensure we have the xcb plugin
        if [ ! -f "AppDir/usr/plugins/platforms/libqxcb.so" ]; then
            echo "ERROR: xcb plugin not found! Searching everywhere..."
            find /usr -name "libqxcb.so" 2>/dev/null | head -1 | while read xcb_plugin; do
                if [ -f "$xcb_plugin" ]; then
                    echo "Found xcb plugin at: $xcb_plugin"
                    cp "$xcb_plugin" AppDir/usr/plugins/platforms/
                fi
            done
        fi
        
        # List what we got
        echo "Platform plugins in AppImage:"
        ls -la AppDir/usr/plugins/platforms/
        
        # Create desktop file
        cat > AppDir/usr/share/applications/HwYtVidGrabber.desktop << 'EOF'
        [Desktop Entry]
        Name=HwYtVidGrabber
        Comment=YouTube Video Downloader
        Exec=HwYtVidGrabber
        Icon=HwYtVidGrabber
        Terminal=false
        Type=Application
        Categories=AudioVideo;Network;
        StartupWMClass=HwYtVidGrabber
        EOF
        
        # Copy desktop file to root
        cp AppDir/usr/share/applications/HwYtVidGrabber.desktop AppDir/
        
        # Copy icons
        cp icon.png AppDir/usr/share/icons/hicolor/256x256/apps/HwYtVidGrabber.png
        cp icon.png AppDir/HwYtVidGrabber.png
        
        # Create AppRun with proper Qt6 environment
        cat > AppDir/AppRun << 'EOF'
        #!/bin/bash
        HERE="$(dirname "$(readlink -f "${0}")")"
        
        # Set up paths
        export PATH="${HERE}/usr/bin:${PATH}"
        export LD_LIBRARY_PATH="${HERE}/usr/lib:${LD_LIBRARY_PATH}"
        
        # Qt6 plugin paths
        export QT_PLUGIN_PATH="${HERE}/usr/plugins"
        export QT_QPA_PLATFORM_PLUGIN_PATH="${HERE}/usr/plugins/platforms"
        
        # Force xcb platform
        export QT_QPA_PLATFORM=xcb
        
        # Debug info
        echo "Qt6 Platform plugins available:"
        ls "${HERE}/usr/plugins/platforms/" 2>/dev/null || echo "No platform plugins found!"
        
        # Run the app
        exec "${HERE}/usr/bin/HwYtVidGrabber" "$@"
        EOF
        chmod +x AppDir/AppRun
        
        # Build AppImage
        ARCH=x86_64 ./appimagetool-x86_64.AppImage --appimage-extract-and-run AppDir HwYtVidGrabber.AppImage
    
    - name: Upload AppImage
      uses: actions/upload-artifact@v4
      with:
        name: linux-appimage
        path: HwYtVidGrabber.AppImage

  build-linux-packages:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install packaging tools
      run: |
        sudo apt-get update
        sudo apt-get install -y debhelper dh-python devscripts fakeroot
    
    - name: Create lightweight DEB package
      run: |
        # Build .deb package with ONLY Python file
        mkdir -p deb-package/DEBIAN
        mkdir -p deb-package/opt/HwYtVidGrabber
        mkdir -p deb-package/usr/bin
        mkdir -p deb-package/usr/share/applications
        mkdir -p deb-package/usr/share/pixmaps
        mkdir -p deb-package/usr/share/doc/HwYtVidGrabber
        
        # Copy ONLY the Python source file and icons
        cp HwYtVidGrabber.py deb-package/opt/HwYtVidGrabber/
        cp icon.png deb-package/opt/HwYtVidGrabber/
        cp icon.ico deb-package/opt/HwYtVidGrabber/
        
        # Create wrapper script that uses virtual environment
        cat > deb-package/usr/bin/HwYtVidGrabber << 'EOF'
        #!/bin/bash
        # HwYtVidGrabber wrapper script with virtual environment
        
        VENV_DIR="/opt/HwYtVidGrabber/venv"
        
        # Set Qt6 platform and run the application
        export QT_QPA_PLATFORM=xcb
        cd /opt/HwYtVidGrabber
        exec "$VENV_DIR/bin/python" HwYtVidGrabber.py "$@"
        EOF
        chmod +x deb-package/usr/bin/HwYtVidGrabber
        
        # Create desktop file
        cat > deb-package/usr/share/applications/HwYtVidGrabber.desktop << 'EOF'
        [Desktop Entry]
        Name=HwYtVidGrabber
        Comment=HwYtVidGrabber - YouTube Video Downloader by MalikHw47
        Exec=HwYtVidGrabber
        Icon=HwYtVidGrabber
        Terminal=false
        Type=Application
        Categories=AudioVideo;Network;
        StartupWMClass=HwYtVidGrabber
        EOF
        
        # Copy icon
        cp icon.png deb-package/usr/share/pixmaps/HwYtVidGrabber.png
        
        # Create control file with minimal dependencies
        cat > deb-package/DEBIAN/control << 'EOF'
        Package: HwYtVidGrabber
        Version: 1.3
        Section: video
        Priority: optional
        Architecture: amd64
        Depends: python3, python3-pyqt6, qt6-qpa-plugins, libqt6gui6, libqt6widgets6, libqt6core6, python3-venv, python3-pip
        Maintainer: MalikHw47 <help.malicorporation@gmail.com>
        Description: HwYtVidGrabber - YouTube Video Downloader by MalikHw47
         HwYtVidGrabber is a lightweight PyQt6-based YouTube video downloader 
         created by MalikHw47 that uses system libraries and virtual environment.
         This package automatically creates a virtual environment and installs yt-dlp during installation.
         .
         Features include:
          - YouTube video downloading with yt-dlp (installed during package setup)
          - Modern PyQt6 interface (uses system libraries)
          - Multiple format support (MP4, MP3, muted MP4)
          - Resolution selection up to 4K
          - Dark mode support
          - Isolated virtual environment created during installation
        Homepage: https://github.com/MalikHw47/HwYtVidGrabber
        EOF
        
        # Create postinst script to create venv and install yt-dlp
        cat > deb-package/DEBIAN/postinst << 'EOF'
        #!/bin/bash
        set -e
        
        VENV_DIR="/opt/HwYtVidGrabber/venv"
        
        echo "Creating HwYtVidGrabber virtual environment..."
        
        # Create virtual environment in /opt/HwYtVidGrabber/venv
        python3 -m venv "$VENV_DIR"
        
        # Install yt-dlp in the virtual environment 
        "$VENV_DIR/bin/pip" install --upgrade pip
        "$VENV_DIR/bin/pip" install yt-dlp
        
        # Make sure venv directory has proper permissions
        chown -R root:root "$VENV_DIR"
        chmod -R 755 "$VENV_DIR"
        
        # Update desktop database
        if [ -x /usr/bin/update-desktop-database ]; then
            /usr/bin/update-desktop-database /usr/share/applications
        fi
        
        echo "HwYtVidGrabber installed successfully with virtual environment!"
        
        exit 0
        EOF
        chmod +x deb-package/DEBIAN/postinst
        
        # Create copyright file
        cat > deb-package/usr/share/doc/HwYtVidGrabber/copyright << 'EOF'
        Format: https://www.debian.org/doc/packaging-manuals/copyright-format/1.0/
        Upstream-Name: HwYtVidGrabber
        Source: https://github.com/MalikHw47/HwYtVidGrabber

        Files: *
        Copyright: 2024 MalikHw47
        License: MIT
        EOF
        
        # Create changelog
        cat > deb-package/usr/share/doc/HwYtVidGrabber/changelog << 'EOF'
        HwYtVidGrabber (1.3) unstable; urgency=medium

          * HwYtVidGrabber v1.3 by MalikHw47 - Virtual environment package
          * Uses system Qt6 packages and creates isolated virtual environment during installation
          * Only contains Python source file for minimal size
          * Automatically creates venv and installs yt-dlp during package installation

         -- MalikHw47 <help.malicorporation@gmail.com>  $(date -R)
        EOF
        
        gzip deb-package/usr/share/doc/HwYtVidGrabber/changelog
        
        # Build DEB package
        dpkg-deb --build deb-package HwYtVidGrabber.deb
    
    - name: Create lightweight Arch package
      run: |
        # Build Arch Linux package with ONLY Python file
        mkdir -p arch-package/pkg/opt/HwYtVidGrabber
        mkdir -p arch-package/pkg/usr/bin
        mkdir -p arch-package/pkg/usr/share/applications
        mkdir -p arch-package/pkg/usr/share/pixmaps
        
        # Copy ONLY the Python source file and icons
        cp HwYtVidGrabber.py arch-package/pkg/opt/HwYtVidGrabber/
        cp icon.png arch-package/pkg/opt/HwYtVidGrabber/
        cp icon.ico arch-package/pkg/opt/HwYtVidGrabber/
        
        # Create wrapper script that uses virtual environment
        cat > arch-package/pkg/usr/bin/HwYtVidGrabber << 'EOF'
        #!/bin/bash
        # HwYtVidGrabber wrapper script with virtual environment
        
        VENV_DIR="/opt/HwYtVidGrabber/venv"
        
        # Set Qt6 platform and run the application
        export QT_QPA_PLATFORM=xcb
        cd /opt/HwYtVidGrabber
        exec "$VENV_DIR/bin/python" HwYtVidGrabber.py "$@"
        EOF
        chmod +x arch-package/pkg/usr/bin/HwYtVidGrabber
        
        # Create desktop file
        cat > arch-package/pkg/usr/share/applications/HwYtVidGrabber.desktop << 'EOF'
        [Desktop Entry]
        Name=HwYtVidGrabber
        Comment=HwYtVidGrabber - YouTube Video Downloader by MalikHw47
        Exec=HwYtVidGrabber
        Icon=HwYtVidGrabber
        Terminal=false
        Type=Application
        Categories=AudioVideo;Network;
        StartupWMClass=HwYtVidGrabber
        EOF
        
        # Copy icon
        cp icon.png arch-package/pkg/usr/share/pixmaps/HwYtVidGrabber.png
        
        # Create .PKGINFO with minimal dependencies
        cat > arch-package/pkg/.PKGINFO << 'EOF'
        pkgname = HwYtVidGrabber
        pkgbase = HwYtVidGrabber
        pkgver = 1.3-1
        pkgdesc = HwYtVidGrabber - YouTube Video Downloader by MalikHw47
        url = https://github.com/MalikHw47/HwYtVidGrabber
        arch = x86_64
        license = MIT
        depend = python
        depend = python-pyqt6
        depend = qt6-base
        depend = python-pip
        EOF
        
        # Create install script for creating venv during installation
        cat > arch-package/pkg/.INSTALL << 'EOF'
        post_install() {
            VENV_DIR="/opt/HwYtVidGrabber/venv"
            
            echo "Creating HwYtVidGrabber virtual environment..."
            
            # Create virtual environment in /opt/HwYtVidGrabber/venv
            python -m venv "$VENV_DIR"
            
            # Install yt-dlp in the virtual environment 
            "$VENV_DIR/bin/pip" install --upgrade pip
            "$VENV_DIR/bin/pip" install yt-dlp
            
            # Make sure venv directory has proper permissions
            chown -R root:root "$VENV_DIR"
            chmod -R 755 "$VENV_DIR"
            
            echo "HwYtVidGrabber installed successfully with virtual environment!"
}

post_upgrade() {
    post_install
}
EOF
        
        # Create package archive
        cd arch-package/pkg
        tar -czf ../../HwYtVidGrabber.pkg.tar.gz .PKGINFO .INSTALL opt/ usr/
    
    - name: Upload DEB package
      uses: actions/upload-artifact@v4
      with:
        name: linux-deb
        path: HwYtVidGrabber.deb
    
    - name: Upload Arch package
      uses: actions/upload-artifact@v4
      with:
        name: linux-arch
        path: HwYtVidGrabber.pkg.tar.gz

  create-release:
    needs: [build-windows, build-macos, build-linux-appimage, build-linux-packages]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          windows-exe/HwYtVidGrabber.exe
          macos-dmg/HwYtVidGrabber.dmg
          linux-deb/HwYtVidGrabber.deb
          linux-arch/HwYtVidGrabber.pkg.tar.gz
          linux-appimage/HwYtVidGrabber.AppImage
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
